import { ConfigurableAbstract } from "mudde-core/src/Core/ConfigurableAbstract";
import { SubjectAbstract } from "mudde-core/src/Core/SubjectAbstract";
import { ObserverAbstract } from "mudde-core/src/Core/ObserverAbstract";
import { HandlerInterface } from "mudde-core/src/Core/HandlerInterface";
import { NodeCore } from "mudde-core/src/Core/NodeCore";
import { Form } from "./Form";
import { Event } from 'mudde-core/src/Core/Event';
declare const InputAbstract_base: import("ts-mixer/dist/types/types").Class<any[], ConfigurableAbstract & SubjectAbstract & ObserverAbstract, typeof ConfigurableAbstract & typeof SubjectAbstract & typeof ObserverAbstract, false>;
export declare abstract class InputAbstract extends InputAbstract_base {
    EVENT_INPUT_PRE_CONFIGURE: number;
    EVENT_INPUT_POST_CONFIGURE: number;
    EVENT_INPUT_FINISHED: number;
    private __type;
    private _id;
    private _label;
    private _help;
    private _placeholder;
    private _panel;
    private _unique;
    private _input;
    private _autofocus;
    private _hidden;
    private _require;
    private _readonly;
    private _multilingual;
    private _handlerBuilders?;
    private _handlerValidations?;
    private _form?;
    private _coreIds;
    private _extraJs;
    protected _rules: {};
    constructor(form: Form);
    abstract coreHTMLInput(id: string, name: string, language: string): NodeCore;
    protected preCoreHTMLInput(): NodeCore | null;
    protected preHTMLInput(): NodeCore | null;
    protected postCoreHTMLInput(): NodeCore | null;
    protected postHTMLInput(): NodeCore | null;
    protected javascript(): string;
    protected canBeMultilingual(): boolean;
    getDefaultConfig(): {
        _type: string;
        id: string;
        input: boolean;
        label: string;
        help: string;
        unique: boolean;
        validations: any[];
        placeholder: string;
        panel: any;
        autofocus: boolean;
        require: boolean;
        readonly: boolean;
        hidden: boolean;
        multilingual: boolean;
        builders: any[];
    };
    /** @override */
    update(event: Event): void;
    private configureBuilders;
    private configureValidations;
    render(): NodeCore;
    get isMultilingual(): boolean;
    get extraJs(): string;
    set extraJs(value: string);
    set id(value: string);
    get id(): string;
    set input(value: boolean);
    get input(): boolean;
    set _type(value: string);
    get _type(): string;
    set label(value: string);
    get label(): string;
    set help(value: string);
    get help(): string;
    set unique(value: boolean);
    get unique(): boolean;
    set handler(value: HandlerInterface);
    get handler(): HandlerInterface;
    set autofocus(value: boolean);
    get autofocus(): boolean;
    set hidden(value: boolean);
    get hidden(): boolean;
    set require(value: boolean);
    get require(): boolean;
    set readonly(value: boolean);
    get readonly(): boolean;
    set multilingual(value: boolean);
    get multilingual(): boolean;
    set form(value: Form);
    get form(): Form;
    set placeholder(value: string);
    get placeholder(): string;
    set panel(value: string);
    get panel(): string;
    get coreIds(): NodeCore[];
    set coreIds(value: NodeCore[]);
    get hasRules(): boolean;
    get rulesComplete(): {};
    get rules(): {};
    set rules(value: {});
}
export {};
